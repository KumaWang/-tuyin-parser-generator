#################################################
# 设置生成的分析器入口点会以parse()函数生成(必须)
#################################################
%parser.entry=sampile_token_test

#################################################
# 设置生成的分析器类型名(默认为{%parser.entry}Parser)
#################################################
%parser.class=test1

#################################################
# 设置产出格式(默认csharp)
# 如果设置为csharp|c...,则会生成代码
# 如果设置为dot则会生成dot图数据
# 值为时opencl将会强制%parser.iterative=true
# 且所有递归将转为循环形式改写
#################################################
%parser.target=csharp

#################################################
# 设置是否以迭代算法形式输出（默认false)
# 当此选项为true时，会拆分流程形成迭代步骤
# 原结构和parser.keep将强制失效，保留parse入口
#################################################
%parser.iterative=true

#################################################
# 内联深度(默认-1)
# 如果设置为0则代表关闭内联
# 如果设置为-1则代表无限深度
# 如果设置为x则代表内联步数超出x时取消内联
# 内联深度越高生成的代码量越大，但同时性能越高
#################################################
%parser.inline=0

#################################################
# 生成表超时设置,单位毫秒(默认5000)
# 如果超时将抛出错误
# 避免复杂声明式NP问题引发等待过长问题
#################################################
%parser.timeout=2000

#################################################
# 设置是否保持原结构(默认false)
# 如果设置为false，则输出结构可能会被优化掉
# 如果只使用parse()，推荐默认保持为false
#################################################
# %parser.keep=true

#################################################
# 设置是否最小化(默认true)
# 如果设置为false，生成结果可能过大，不推荐修改
#################################################
# %parser.minimize=true

#################################################
# 设置是否以NFA模式输出(默认false)
# 如果设置为true,性能优化将失效
# 推荐不修改此选项
#################################################
# %parser.nfa=false

#################################################
# 设置是否尝试以转跳表构建分支(默认true)
# 该选项为true时会将对Token的索引进行紧凑化
# 以C#编译器为例，它大概支持7至10区间的switch表
# 比如switch(a) a>0&&a<10 编译时会将分支映射成区间
# switch相当于对当前进程地址做了偏移避免全部判断
# 开启此选项会加快程序运行性能略微牺牲内存空间
#################################################
# %parser.table=false

#################################################
# 设置是否支持多义词(默认false)
# 当此选项为true时则支持以下歧义Token
# abcde				^ID
# abcde				^VAR
# 123				^NUM
# rule id_var		转换为		rule id_var
#	: VAR NUM		^$2    ->		: VAR_ID (NUM|ε)
#	| ID			^$1				;
#	;
# 其中VAR_ID是被自动创建的Token用于解决歧义问题
#################################################
# %token.clarity=true

#################################################
# 设置是否支自动声明Token(默认false)
# 比如:
#	rule foo
#		: literal ....
# 其中literal并没有在文件内直接声明
# 此设置为true时，由于literal是唯一路径
# 所以会自动创建该Token并引用，否则会抛出错误
#################################################
%token.auto=true

#################################################
# 设置是否添加状态记录步(默认false)
# 此项为true时会在生成调用State(%1,%2..)
# %1 int index 从输入源该索引位置起
# %2 ushort state 目标状态
# .. formals
#################################################
%parser.state=false

#################################################
# 设置是否添加token被匹配时回调
# 此项为true时会在匹配token成功时调用一次OnMatch
#################################################
%token.callback=true

#################################################
# 设置是否设置为Debug模式
# 此项为true时生成的代码会额外添加所使用的边注释
#################################################
%token.debug=false

#################################################
# 使用formal时会将所有分析函数添加一个传参
# 比如 parse将从char*,int变为char*,int,Type
# Type名由生成器管理根据顺序定义为formal0-formalN
# 所有反馈函数,如Coloring或是Metadata将会把该
#   参数传递回去,如下:
# State(int index...			Type formal0)
# GetState(int index...			Type formal0)
# Coloring(int start...			Type formal0)
# ReportError(SourceSpan span.. Type formal0)
# ...
# Metadata(int index...			Type formal0)
#################################################
%formal Type


//(\ |\n|\r|\t)+						
|									^or
start{ReadAction()}end				^action
(A-Z|a-z)(A-Z|a-z|0-9)*				^id
a-z*								^short_id
pp									^p
pp									^p2
add									^add_str
+									^add
-									^sub
*									^mul
/									^div
(									^left
)									^right
&									^and

\\.												^ESCAPE
(A-Z|a-z|0-9)									^NCODE
\\u(NCODE)(NCODE)(NCODE)(NCODE)					^UNICODE
0x(NCODE)(NCODE)								^HEX
(^\')|ESCAPE									^CHAR
\'(CHAR|ESCAPE|UNICODE|HEX)*\'					^STRING1

\'((^\')|(\\\'))*\'								^SAMPILE

(aaa)*											^LOOP
(aaa)*											^LOOP2
(aa|aaa)*										^LOOP3
(aa|.)*											^LOOP4
(0-9)?(.(0-9)+)									^NUMBER

\/\/(^\n)*\n									^C1
^\*/											^C2
'//'..\n										^C3
'/*'..'*/'										^C4
\/\*^\*\/										^C5

aa*												^L1
(L1)e(L1)										^L2

^\"|(\\\")										^CHAR
\"(CHAR)*\"										^STRING

rule sampile_token_test
	: STRING
	;

rule token_test
	: STRING
	;

rule stmt<Statement>
	: 'while' exp stmt				{ new While($2, $3) }
	| 'switch' exp switch_cases		{ new Switch($2, $3) } 
	| 'break'						{ new Break($1) }
	| 'continue'					{ new Continue($1) }
	| stmt_block					{ $1 }
	;

rule stmt_block<Statement>
	: '{' stmt_block_stmts '}'		{ $2 }
	;

rule stmt_block_stmts<Statement>
	: stmt							{ $1 }
	| stmt_block_stmts stmt			{ new Conect($1, $2) }
	;

rule switch_cases<SwitchCases>
	:								{ new SwitchCases() }
	| switch_case					{ new SwitchCases($1) }
	| switch_cases switch_case		{ $1.Add($2) }
	;

rule switch_case<SwitchCase>
	: 'case' exp ':' stmt			{ new SwitchCase($2, $4) }
	| 'default' ':' stmt			{ new SwitchDefault($3) }
	;

rule token_create
	: id add
	| add_str
	;

rule token_conflict
	: p add							{ add($1) }
	| p2							{ sub($1) }
	;

// loop
rule loop_s
	: p								{ 0 }
	| loop_s sub sub 				
	| loop_s sub					
	;

rule loop_s1
	: p								{ 0 }
	| loop_s sub sub 				{ 1 }
	| loop_s sub					{ 2 }
	;

// 堆栈变化
rule loop_r<List<int>>
	: p								{ new List<int>() }
	| loop_r sub add sub			{ $1.Add($4) }
	| p sub							{ new List<int>($2) }
	;

rule loop_r4<List<int>>
	: p								{ new List<int>() }
	| loop_r4 sub add sub			{ $1.Add($4) }
	| loop_r4 sub					{ $1.Add($2) }
	;

// 预测1
rule loop_r2<List<int>>
	: p								{ new List<int>() }
	| loop_r2 sub add sub			{ $1.Add($4) }
	| loop_r3						
	;

rule loop_r3<List<int>>
	: p								{ new List<int>() }
	| loop_r3 sub 					{ $1.Add($2) }
	;

// while any 退出机制
rule rc3<IList<Match>>
	: p								{ new List<Match>() }
	| rc2 add						{ $1.Add($2) }
	| rc2 sub						{ new List<Match>() }
	;

// 复杂规则
rule rc2<IList<Match>>
	: p								{ new List<Match>() }
	| rc2 add						{ $1.Add($2) }
	| p add sub						{ new List<Match>() }
	;

rule rc1<IList<Match>>
	: rc1 add						{ $1.Add($2) }
	| rc1 sub mul left				{ $1.Add($4) }
	| p								{ new List<Match>() }
	;

rule rc<IList<Match>>
	: p	add sub						{ new List<Match>() }
	| rc1							{ $1 }
	;

// 左递归
rule exp<int>
	: id							{ 1 }
	;

rule exp1<int>
	: exp add exp_md				{ $1+$3 }
	| exp sub exp_md				{ $1-$3 }
	| exp_md						
	;

// 右递归
rule exp_md<int>
	: exp_cd mul exp_md				{ $1*$3 }
	| exp_cd div exp_md				{ $1/$3 }
	;

// 自递归
rule exp_cd<int>
	: exp_cd and exp_cd				{ $1&$3 }
	| exp_cd or exp_cd				{ $1|$3 }
	| exp_p
	;

rule exp_p<int>
	: p								{ 1 }
	| '(' exp ')'					{ $2 }
	;

rule flow<Expr>
	: mul list sub					{ $1+$3 }
	;

rule list4<List<int>>
	: item							{ new List<int>($1) }
	| 'if' list4					{ $1.Add($2) }
	;

rule list3<List<int>>
	: 								{ new List<int>() }
	| item							{ new List<int>($1) }
	| list3 item					{ $1.Add($2) }
	;

rule list<List<int>>
	: 								{ new List<int>() }
	| items							{ $1 }
	;

rule items<List<int>>
	: item							{ new List<int>($1) }
	| items item					{ $1.Add($2) }
	;

rule item<int>
	: p								{ $1 }
	;

// 最小化
rule min<int>
	: p add p
	| p sub p
	;

rule min1<int>
	: p add
	| p sub
	;

rule min2<int>
	: p sub p
	;

// 虚函数测试
rule void_func
	: p								{ 1 }
	;

rule rule_test
	: void_func						{ $1 }
	;

// 多行语义动作
rule mult_line<int>
	: p
	{
		// 注释哦
		$=$1
	}
	| p add
	{
		$2
	}
	;