%parser.entry=markdown
%parser.class=TuyinMarkdownParser
%parser.namespace=ParserGeneratorTest
%parser.target=csharp
%parser.minimize=true
%parser.table=false
%parser.timeout=2000
%parser.inline=0
%parser.state=false
%parser.debug=true
%token.clarity=false
%token.callback=false
%token.auto=true
%import Tuitor.packages.richtext.format
%import Tuitor.packages.richtext.format.parsers.markdown
			
...\n											^LITERAL
(0-9)+											^NUMBER
(^\n)*											^FORMAT
..```											^FORMAT_DATA
(\ |\n|\r|\t)+				

rule markdown<Markdown>
	:											^new Markdown()
	| markdown_item								^new Markdown($1)
	| markdown markdown_item					^$1.Add($2)
	;

rule markdown_item<MarkdownItem>
	: simple_item								^$1
	| complex_item								^$1
	;

rule simple_item<MarkdownItem>
	: delete									^$1
	| underline									^$1
	| label										^$1
	| image										^$1
	| prim										^$1
	;

rule literal<MarkdownLiteral>
	: LITERAL									^new MarkdownLiteral(mInput, $1)
	;

rule prim<MarkdownItem>	
	: numtitle									^$1
	| link										^$1
	| bold										^$1
	| italicsbold								^$1
	| italics									^$1
	| numtitle									^$1
	| literal									^$1
	;

rule italics<MarkdownItem>
	: '*' literal '*'							^new Italics($2, $1, $3)
	| '_' literal '_'							^new Italics($2, $1, $3)
	;

rule bold<MarkdownItem>
	: '**' literal '**'							^new Bold($2, $1, $3)
	| '__' literal '__'							^new Bold($2, $1, $3)
	;

rule italicsbold<MarkdownItem>
	: '***' literal '***'						^new ItalicsBold($2, $1, $3)
	| '___' literal '___'						^new ItalicsBold($2, $1, $3)
	;

rule label<MarkdownItem>
	: '[^' literal ']'							^new MarkdownLabel($2, $1, $3)
	;

rule numtitle<NumberTitle>
	: '#' numtitle								^$2.AddLevel($1)
	| '#' literal								^new NumberTitle($1, $2)
	;

rule link<Link>
	: '[' literal ']' '(' literal ')'			^new Link($2, $5, $1, $6)
	| '<' literal '>'							^new Link($2, $1, $3)
	;

rule image<MarkdownItem>
	: '!' link									^new MarkdownImage($2, $1)
	;

rule delete<MarkdownItem>
	: '~~' prim '~~'							^new Delete($2, $1, $3)
	;

rule underline<MarkdownItem>
	: '++' prim '++'							^new Underline($2, $1, $3)
	;

rule complex_item<MarkdownItem>
	: table										^$1
	| unordered_list							^$1
	| ordered_list								^$1
	;

rule format_text<MarkdownItem>
	: '```' FORMAT FORMAT_DATA '```'			^new FormatText($2, $3, $1, $4)
	;

rule unordered_list<UnorderedList>
	: unordered_list_item						^new UnorderedList($1)
	| unordered_list unordered_list_item		^$1.Add($2)
	;

rule unordered_list_item<UnorderedListItem>
	: '-' simple_item							^new UnorderedListItem($1, $2)
	;

rule ordered_list<OrderedList>
	: ordered_list_item							^new OrderedList($1)
	| ordered_list ordered_list_item			^$1.Add($2)
	;

rule ordered_list_item<OrderedListItem>
	: NUMBER '.' simple_item					^new OrderedListItem($1, $3)
	;

rule table<Table>
	: table_row									^new Table($1)
	| table table_row							^$1.Add($2)
	;
	
rule table_row<TableRow>
	: '|' table_row_item						^new TableRow($2)
	| table_row table_row_item					^$1.Add($2)
	;

rule table_row_item<TableRowItem>
	: simple_item '|'							^new TableRowItem($1)
	;

