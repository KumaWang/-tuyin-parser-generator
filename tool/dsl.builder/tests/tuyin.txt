%parser.entry=parser
%parser.class=TuyinParser
%parser.target=csharp
%parser.inline=-1
%parser.minimize=true
%parser.table=true
%token.clarity=false
%token.auto=true
%import System.Collections.Generic
%import dsl.builder

\{{ReadAction()}											^ACTION
(.)..\n														^ACTION_LINE
\<{ReadType()}												^TYPE
\%..\n														^OPATIONAL
(A-Z|a-z)(A-Z|a-z|0-9)*										^ID
(0-9)?(\.(0-9)+)											^NUMBER												
\\.															^ESCAPE
(A-Z|a-z|0-9)												^NCODE
\\u(NCODE)(NCODE)(NCODE)(NCODE)								^UNICODE
0x(NCODE)(NCODE)											^HEX
^\'|ESCAPE													^CHAR
\'(CHAR|ESCAPE|UNICODE|HEX)*\'								^STRING
(^' \n\t\b{}()|*+-?\^\''|(\\' \n\t\b{}()|*+-?\^\''))+		^LITERAL
'//'..\n													
'/*'..'*/'													
(\ |\n|\r|\t)+			

# 入口
rule parser<Parser>
	:														{ new Parser() }
	| parser_item											{ new Parser($1) }					
	| parser parser_item									{ $1.Add($2) }
	;

rule parser_item<ParserItem>
	: token													{ $1 }
	| rule													{ $1 }
	| OPATIONAL												{ new Opational($1) }
	;

# 设置
rule setting<Setting>
	:														{ new Setting() }
	| setting_item											{ new Setting($1) }
	| setting '|' setting_item								{ $1.Add($3) }
	;

rule setting_item<SettingItem>
	: ID													{ new SettingItem($1) }
	| ID '=' setting_value									{ new SettingItem($1, $3) }
	;

rule setting_value<SettingValue>
	: 'true'												{ new BooleanValue($1, true) }
	| 'false'												{ new BooleanValue($1, false) }
	| NUMBER												{ new NumberValue($1) }
	| STRING												{ new StringValue($1) }
	;

# Token
rule token<Token>
	: token_or '^' ID										{ new Token($1, $3) }
	| token_or '^' ID '[' setting ']'						{ new Token($1, $3, $5) }
	;

rule token_or<TokenItem>
	: token_token											{ $1 }
	| token_or '|' token_token								{ new TokenOr($1, $3) }
	;

rule token_token<TokenItem>
	: token_action											{ $1 }
	| token_token token_action								{ new TokenToken($1, $2) }
	;

rule token_action<TokenItem>
	: token_post											{ $1 }
	| token_post ACTION										{ new TokenAction($1, $2) }
	| token_post '^' ACTION_LINE							{ new TokenAction($1, $3) }
	;

rule token_post<TokenItem>
	: token_prim											{ $1 }
	| token_prim '+'										{ new TokenMany1($1) }
	| token_prim '*'										{ new TokenMany($1) }
	| token_prim '?'										{ new TokenOptional($1) }
	;

rule token_prim<TokenItem>
	: token_literal											{ $1 }
	| '[' token_literal '-' token_literal ']'				{ new TokenRange($2, $4) }
	| '^' token_literal										{ new TokenExcept($2) }
	| token_literal '..' token_literal						{ new TokenUntil($1, $3) }
	| '(' token_or ')'										{ $2 }
	;

rule token_literal<TokenItem>
	: '.'													{ new TokenAny($1) }
	| STRING												{ new TokenString($1) }
	//| LITERAL												{ new TokenLiteral($1) }
	;

# Rule
rule rule<Rule>
	: 'rule' ID rule_type ':' rule_or ';'					{ new Rule($2, $3, $5) }		
	| 'rule' ID rule_type '[' setting ']' ':' rule_or ';'	{ new Rule($2, $3, $8, $5) }		
	;

rule rule_type<RuleType>
	:														{ RuleType.Void }
	| TYPE													{ new RuleType($1) }
	;

rule rule_or<RuleItem>
	: rule_action											{ $1 }
	| rule_or '|' rule_action								{ new RuleOr($1, $3) }
	;

rule rule_action<RuleItem>
	: ACTION												{ new RuleAction(new RuleEmpty(), $1) }
	| rule_rule ACTION										{ new RuleAction($1, $2) }
	| rule_rule												{ $1 }
	;

rule rule_rule<RuleItem>
	: rule_opation											{ $1 }
	| rule_rule rule_opation								{ new RuleRule($1, $2) }
	;

rule rule_opation<RuleItem>
	: rule_prim												{ $1 }
	| rule_prim '[' setting ']'								{ new RuleOpation($1, $3) }
	;

rule rule_prim<RuleItem>
	: ID													{ new RuleReference($1) }
	| STRING												{ new RuleString($1) }
	;